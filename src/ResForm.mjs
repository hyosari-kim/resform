// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Id from "../node_modules/rescript/lib/es6/belt_Id.js";
import * as Belt_Map from "../node_modules/rescript/lib/es6/belt_Map.js";
import * as Caml_obj from "../node_modules/rescript/lib/es6/caml_obj.js";
import * as Belt_List from "../node_modules/rescript/lib/es6/belt_List.js";

function Make(Config) {
  var cmp = function (a, b) {
    if (Caml_obj.caml_equal(a, b)) {
      return 0;
    } else {
      return 1;
    }
  };
  var ErrorFieldCmp = Belt_Id.MakeComparable({
        cmp: cmp
      });
  var getError = Belt_Map.get;
  var eqErrors = function (cur, next) {
    return Belt_Map.eq(cur, next, (function (ce, ne) {
                  return ce.type_ === ne.type_;
                }));
  };
  var register = function (state, rawField) {
    state.refs.contents = Belt_List.setAssoc(state.refs.contents, rawField, React.useRef(null), Caml_obj.caml_equal);
    var onChange = function (e) {
      var ref = Belt_List.getAssoc(state.refs.contents, rawField, Caml_obj.caml_equal);
      var target = e.target.value;
      state.values.contents = Curry._3(Config.set, state.values.contents, rawField, target);
      console.log("ref: ", ref, "values: ", state.values.contents);
      
    };
    return {
            onChange: onChange,
            ref: Belt_List.getAssoc(state.refs.contents, rawField, Caml_obj.caml_equal)
          };
  };
  var use = function (inital, validators) {
    var match = React.useState(function () {
          return {
                  values: {
                    contents: inital
                  },
                  refs: {
                    contents: /* [] */0
                  },
                  errors: Belt_Map.make(ErrorFieldCmp)
                };
        });
    var state = match[0];
    return {
            register: (function (param) {
                return register(state, param);
              })
          };
  };
  return {
          V: undefined,
          ErrorFieldCmp: ErrorFieldCmp,
          getError: getError,
          eqErrors: eqErrors,
          register: register,
          use: use
        };
}

export {
  Make ,
  
}
/* react Not a pure module */
